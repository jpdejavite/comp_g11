/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.analysis;

import java.util.*;
import minijava.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getMainClass() != null)
        {
            node.getMainClass().apply(this);
        }
        {
            List<PClassDecl> copy = new ArrayList<PClassDecl>(node.getClassList());
            for(PClassDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAMainClass(AMainClass node)
    {
        defaultIn(node);
    }

    public void outAMainClass(AMainClass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainClass(AMainClass node)
    {
        inAMainClass(node);
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        if(node.getMainArgName() != null)
        {
            node.getMainArgName().apply(this);
        }
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        outAMainClass(node);
    }

    public void inAClassDecl(AClassDecl node)
    {
        defaultIn(node);
    }

    public void outAClassDecl(AClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDecl(AClassDecl node)
    {
        inAClassDecl(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSuperClass() != null)
        {
            node.getSuperClass().apply(this);
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarList());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PMethodDecl> copy = new ArrayList<PMethodDecl>(node.getMethodList());
            for(PMethodDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAClassDecl(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAVarDecl(node);
    }

    public void inAMethodDecl(AMethodDecl node)
    {
        defaultIn(node);
    }

    public void outAMethodDecl(AMethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDecl(AMethodDecl node)
    {
        inAMethodDecl(node);
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PFormal> copy = new ArrayList<PFormal>(node.getFormals());
            for(PFormal e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getLocals());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getBody());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getReturnExp() != null)
        {
            node.getReturnExp().apply(this);
        }
        outAMethodDecl(node);
    }

    public void inAFormal(AFormal node)
    {
        defaultIn(node);
    }

    public void outAFormal(AFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormal(AFormal node)
    {
        inAFormal(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAFormal(node);
    }

    public void inAIntArrayTypeType(AIntArrayTypeType node)
    {
        defaultIn(node);
    }

    public void outAIntArrayTypeType(AIntArrayTypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntArrayTypeType(AIntArrayTypeType node)
    {
        inAIntArrayTypeType(node);
        outAIntArrayTypeType(node);
    }

    public void inABooleanTypeType(ABooleanTypeType node)
    {
        defaultIn(node);
    }

    public void outABooleanTypeType(ABooleanTypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanTypeType(ABooleanTypeType node)
    {
        inABooleanTypeType(node);
        outABooleanTypeType(node);
    }

    public void inAIntegerTypeType(AIntegerTypeType node)
    {
        defaultIn(node);
    }

    public void outAIntegerTypeType(AIntegerTypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerTypeType(AIntegerTypeType node)
    {
        inAIntegerTypeType(node);
        outAIntegerTypeType(node);
    }

    public void inAIdentifierTypeType(AIdentifierTypeType node)
    {
        defaultIn(node);
    }

    public void outAIdentifierTypeType(AIdentifierTypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierTypeType(AIdentifierTypeType node)
    {
        inAIdentifierTypeType(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAIdentifierTypeType(node);
    }

    public void inABlockStatement(ABlockStatement node)
    {
        defaultIn(node);
    }

    public void outABlockStatement(ABlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatement(ABlockStatement node)
    {
        inABlockStatement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getBody());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outABlockStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getThenClause() != null)
        {
            node.getThenClause().apply(this);
        }
        if(node.getElseClause() != null)
        {
            node.getElseClause().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPrintStatement(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inAArrayAssignStatement(AArrayAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAArrayAssignStatement(AArrayAssignStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAssignStatement(AArrayAssignStatement node)
    {
        inAArrayAssignStatement(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAArrayAssignStatement(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAAndExp(node);
    }

    public void inALessThanExp(ALessThanExp node)
    {
        defaultIn(node);
    }

    public void outALessThanExp(ALessThanExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanExp(ALessThanExp node)
    {
        inALessThanExp(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outALessThanExp(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAMinusExp(node);
    }

    public void inATimesExp(ATimesExp node)
    {
        defaultIn(node);
    }

    public void outATimesExp(ATimesExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesExp(ATimesExp node)
    {
        inATimesExp(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outATimesExp(node);
    }

    public void inAArrayLookupExp(AArrayLookupExp node)
    {
        defaultIn(node);
    }

    public void outAArrayLookupExp(AArrayLookupExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayLookupExp(AArrayLookupExp node)
    {
        inAArrayLookupExp(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        outAArrayLookupExp(node);
    }

    public void inAArrayLengthExp(AArrayLengthExp node)
    {
        defaultIn(node);
    }

    public void outAArrayLengthExp(AArrayLengthExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayLengthExp(AArrayLengthExp node)
    {
        inAArrayLengthExp(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outAArrayLengthExp(node);
    }

    public void inACallExp(ACallExp node)
    {
        defaultIn(node);
    }

    public void outACallExp(ACallExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallExp(ACallExp node)
    {
        inACallExp(node);
        if(node.getObject() != null)
        {
            node.getObject().apply(this);
        }
        if(node.getMethod() != null)
        {
            node.getMethod().apply(this);
        }
        {
            List<PExp> copy = new ArrayList<PExp>(node.getActuals());
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outACallExp(node);
    }

    public void inAIntegerLiteralExp(AIntegerLiteralExp node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteralExp(AIntegerLiteralExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteralExp(AIntegerLiteralExp node)
    {
        inAIntegerLiteralExp(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAIntegerLiteralExp(node);
    }

    public void inATrueExp(ATrueExp node)
    {
        defaultIn(node);
    }

    public void outATrueExp(ATrueExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExp(ATrueExp node)
    {
        inATrueExp(node);
        outATrueExp(node);
    }

    public void inAFalseExp(AFalseExp node)
    {
        defaultIn(node);
    }

    public void outAFalseExp(AFalseExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExp(AFalseExp node)
    {
        inAFalseExp(node);
        outAFalseExp(node);
    }

    public void inAThisExp(AThisExp node)
    {
        defaultIn(node);
    }

    public void outAThisExp(AThisExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisExp(AThisExp node)
    {
        inAThisExp(node);
        outAThisExp(node);
    }

    public void inANewArrayExp(ANewArrayExp node)
    {
        defaultIn(node);
    }

    public void outANewArrayExp(ANewArrayExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewArrayExp(ANewArrayExp node)
    {
        inANewArrayExp(node);
        if(node.getSize() != null)
        {
            node.getSize().apply(this);
        }
        outANewArrayExp(node);
    }

    public void inANewObjectExp(ANewObjectExp node)
    {
        defaultIn(node);
    }

    public void outANewObjectExp(ANewObjectExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewObjectExp(ANewObjectExp node)
    {
        inANewObjectExp(node);
        if(node.getClassname() != null)
        {
            node.getClassname().apply(this);
        }
        outANewObjectExp(node);
    }

    public void inANotExp(ANotExp node)
    {
        defaultIn(node);
    }

    public void outANotExp(ANotExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        inANotExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANotExp(node);
    }

    public void inAIdentifierExpExp(AIdentifierExpExp node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpExp(AIdentifierExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExpExp(AIdentifierExpExp node)
    {
        inAIdentifierExpExp(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAIdentifierExpExp(node);
    }

    public void inAIdentifier(AIdentifier node)
    {
        defaultIn(node);
    }

    public void outAIdentifier(AIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifier(AIdentifier node)
    {
        inAIdentifier(node);
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        outAIdentifier(node);
    }
}
