/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AIfStatement extends PStatement
{
    private PExp _condition_;
    private PStatement _thenClause_;
    private PStatement _elseClause_;

    public AIfStatement()
    {
        // Constructor
    }

    public AIfStatement(
        @SuppressWarnings("hiding") PExp _condition_,
        @SuppressWarnings("hiding") PStatement _thenClause_,
        @SuppressWarnings("hiding") PStatement _elseClause_)
    {
        // Constructor
        setCondition(_condition_);

        setThenClause(_thenClause_);

        setElseClause(_elseClause_);

    }

    @Override
    public Object clone()
    {
        return new AIfStatement(
            cloneNode(this._condition_),
            cloneNode(this._thenClause_),
            cloneNode(this._elseClause_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStatement(this);
    }

    public PExp getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PExp node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public PStatement getThenClause()
    {
        return this._thenClause_;
    }

    public void setThenClause(PStatement node)
    {
        if(this._thenClause_ != null)
        {
            this._thenClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenClause_ = node;
    }

    public PStatement getElseClause()
    {
        return this._elseClause_;
    }

    public void setElseClause(PStatement node)
    {
        if(this._elseClause_ != null)
        {
            this._elseClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseClause_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._condition_)
            + toString(this._thenClause_)
            + toString(this._elseClause_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._thenClause_ == child)
        {
            this._thenClause_ = null;
            return;
        }

        if(this._elseClause_ == child)
        {
            this._elseClause_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._condition_ == oldChild)
        {
            setCondition((PExp) newChild);
            return;
        }

        if(this._thenClause_ == oldChild)
        {
            setThenClause((PStatement) newChild);
            return;
        }

        if(this._elseClause_ == oldChild)
        {
            setElseClause((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
