/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.parser;

import minijava.lexer.*;
import minijava.node.*;
import minijava.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProg */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AMainclass */
		    {
			ArrayList list = new1();
			push(goTo(1), list);
		    }
		    break;
                    case 2: /* reduce AClassextendsClassdeclaration */
		    {
			ArrayList list = new2();
			push(goTo(2), list);
		    }
		    break;
                    case 3: /* reduce AClassClassdeclaration */
		    {
			ArrayList list = new3();
			push(goTo(2), list);
		    }
		    break;
                    case 4: /* reduce AEmptyClassdeclaration */
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce AVardeclarationVardeclaration */
		    {
			ArrayList list = new5();
			push(goTo(3), list);
		    }
		    break;
                    case 6: /* reduce AEmptyVardeclaration */
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce AMethodparamMethoddeclaration */
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;
                    case 8: /* reduce AEmptyMethoddeclaration */
		    {
			ArrayList list = new8();
			push(goTo(4), list);
		    }
		    break;
                    case 9: /* reduce AParamlistParamlist */
		    {
			ArrayList list = new9();
			push(goTo(5), list);
		    }
		    break;
                    case 10: /* reduce AEmptyParamlist */
		    {
			ArrayList list = new10();
			push(goTo(5), list);
		    }
		    break;
                    case 11: /* reduce AParamsParams */
		    {
			ArrayList list = new11();
			push(goTo(6), list);
		    }
		    break;
                    case 12: /* reduce AEmptyParams */
		    {
			ArrayList list = new12();
			push(goTo(6), list);
		    }
		    break;
                    case 13: /* reduce AStatementlistStatementlist */
		    {
			ArrayList list = new13();
			push(goTo(7), list);
		    }
		    break;
                    case 14: /* reduce AEmptyStatementlist */
		    {
			ArrayList list = new14();
			push(goTo(7), list);
		    }
		    break;
                    case 15: /* reduce AIntarrayType */
		    {
			ArrayList list = new15();
			push(goTo(8), list);
		    }
		    break;
                    case 16: /* reduce ABooleanType */
		    {
			ArrayList list = new16();
			push(goTo(8), list);
		    }
		    break;
                    case 17: /* reduce AIntType */
		    {
			ArrayList list = new17();
			push(goTo(8), list);
		    }
		    break;
                    case 18: /* reduce AIdType */
		    {
			ArrayList list = new18();
			push(goTo(8), list);
		    }
		    break;
                    case 19: /* reduce AStatement */
		    {
			ArrayList list = new19();
			push(goTo(9), list);
		    }
		    break;
                    case 20: /* reduce AIfmatchedIfstatement */
		    {
			ArrayList list = new20();
			push(goTo(10), list);
		    }
		    break;
                    case 21: /* reduce AIfunmatchedIfstatement */
		    {
			ArrayList list = new21();
			push(goTo(10), list);
		    }
		    break;
                    case 22: /* reduce AIfelseIfmatched */
		    {
			ArrayList list = new22();
			push(goTo(11), list);
		    }
		    break;
                    case 23: /* reduce AOtherIfmatched */
		    {
			ArrayList list = new23();
			push(goTo(11), list);
		    }
		    break;
                    case 24: /* reduce AIfIfunmatched */
		    {
			ArrayList list = new24();
			push(goTo(12), list);
		    }
		    break;
                    case 25: /* reduce AIfelseIfunmatched */
		    {
			ArrayList list = new25();
			push(goTo(12), list);
		    }
		    break;
                    case 26: /* reduce AStatementlistOtherstatement */
		    {
			ArrayList list = new26();
			push(goTo(13), list);
		    }
		    break;
                    case 27: /* reduce AWhileOtherstatement */
		    {
			ArrayList list = new27();
			push(goTo(13), list);
		    }
		    break;
                    case 28: /* reduce ASysoOtherstatement */
		    {
			ArrayList list = new28();
			push(goTo(13), list);
		    }
		    break;
                    case 29: /* reduce AEqualOtherstatement */
		    {
			ArrayList list = new29();
			push(goTo(13), list);
		    }
		    break;
                    case 30: /* reduce AArrayequalOtherstatement */
		    {
			ArrayList list = new30();
			push(goTo(13), list);
		    }
		    break;
                    case 31: /* reduce AIdentifierOtherexpression */
		    {
			ArrayList list = new31();
			push(goTo(14), list);
		    }
		    break;
                    case 32: /* reduce ANumberOtherexpression */
		    {
			ArrayList list = new32();
			push(goTo(14), list);
		    }
		    break;
                    case 33: /* reduce ATrueOtherexpression */
		    {
			ArrayList list = new33();
			push(goTo(14), list);
		    }
		    break;
                    case 34: /* reduce AFalseOtherexpression */
		    {
			ArrayList list = new34();
			push(goTo(14), list);
		    }
		    break;
                    case 35: /* reduce AThisOtherexpression */
		    {
			ArrayList list = new35();
			push(goTo(14), list);
		    }
		    break;
                    case 36: /* reduce AParenOtherexpression */
		    {
			ArrayList list = new36();
			push(goTo(14), list);
		    }
		    break;
                    case 37: /* reduce AArrayOtherexpression */
		    {
			ArrayList list = new37();
			push(goTo(14), list);
		    }
		    break;
                    case 38: /* reduce ALengthOtherexpression */
		    {
			ArrayList list = new38();
			push(goTo(14), list);
		    }
		    break;
                    case 39: /* reduce AAccessOtherexpression */
		    {
			ArrayList list = new39();
			push(goTo(14), list);
		    }
		    break;
                    case 40: /* reduce AInstanceOtherexpression */
		    {
			ArrayList list = new40();
			push(goTo(14), list);
		    }
		    break;
                    case 41: /* reduce ANewarrayOtherexpression */
		    {
			ArrayList list = new41();
			push(goTo(14), list);
		    }
		    break;
                    case 42: /* reduce ANotexpressionNotexpression */
		    {
			ArrayList list = new42();
			push(goTo(15), list);
		    }
		    break;
                    case 43: /* reduce ANextNotexpression */
		    {
			ArrayList list = new43();
			push(goTo(15), list);
		    }
		    break;
                    case 44: /* reduce ATimesexpressionTimesexpression */
		    {
			ArrayList list = new44();
			push(goTo(16), list);
		    }
		    break;
                    case 45: /* reduce ANextTimesexpression */
		    {
			ArrayList list = new45();
			push(goTo(16), list);
		    }
		    break;
                    case 46: /* reduce APlusPmexpression */
		    {
			ArrayList list = new46();
			push(goTo(17), list);
		    }
		    break;
                    case 47: /* reduce AMinusPmexpression */
		    {
			ArrayList list = new47();
			push(goTo(17), list);
		    }
		    break;
                    case 48: /* reduce ANextPmexpression */
		    {
			ArrayList list = new48();
			push(goTo(17), list);
		    }
		    break;
                    case 49: /* reduce ALessexpressionLessexpression */
		    {
			ArrayList list = new49();
			push(goTo(18), list);
		    }
		    break;
                    case 50: /* reduce ANextLessexpression */
		    {
			ArrayList list = new50();
			push(goTo(18), list);
		    }
		    break;
                    case 51: /* reduce AExpressionExpression */
		    {
			ArrayList list = new51();
			push(goTo(19), list);
		    }
		    break;
                    case 52: /* reduce ANextExpression */
		    {
			ArrayList list = new52();
			push(goTo(19), list);
		    }
		    break;
                    case 53: /* reduce AExpressionlistExpressionlist */
		    {
			ArrayList list = new53();
			push(goTo(20), list);
		    }
		    break;
                    case 54: /* reduce AEmptyExpressionlist */
		    {
			ArrayList list = new54();
			push(goTo(20), list);
		    }
		    break;
                    case 55: /* reduce AExpressionrestExpressionrest */
		    {
			ArrayList list = new55();
			push(goTo(21), list);
		    }
		    break;
                    case 56: /* reduce AEmptyExpressionrest */
		    {
			ArrayList list = new56();
			push(goTo(21), list);
		    }
		    break;
                    case 57: /* reduce AIdentifier */
		    {
			ArrayList list = new57();
			push(goTo(22), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainClass pmainclassNode2;
        LinkedList listNode4 = new LinkedList();
        pmainclassNode2 = (PMainClass)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AMainclass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList17 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMainClass pmainclassNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PIdentifier pidentifierNode3;
        PStatement pstatementNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList12.get(0);
        pstatementNode4 = (PStatement)nodeArrayList15.get(0);

        pmainclassNode1 = new AMainClass(pidentifierNode2, pidentifierNode3, pstatementNode4);
        }
	nodeList.add(pmainclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AClassextendsClassdeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode9 = new LinkedList();
        {
            // Block
        PClassDecl pclassdeclNode1;
        LinkedList listNode8 = new LinkedList();
        {
            // Block
        PIdentifier pidentifierNode2;
        PIdentifier pidentifierNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassdeclNode1 = new AClassDecl(pidentifierNode2, pidentifierNode3, listNode5, listNode7);
        }
        listNode8 = (LinkedList)nodeArrayList9.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode9.add(pclassdeclNode1);
	}
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
	nodeList.add(listNode9);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AClassClassdeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode9 = new LinkedList();
        {
            // Block
        PClassDecl pclassdeclNode1;
        LinkedList listNode8 = new LinkedList();
        {
            // Block
        PIdentifier pidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassdeclNode1 = new AClassDecl(pidentifierNode2, null, listNode5, listNode7);
        }
        listNode8 = (LinkedList)nodeArrayList7.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode9.add(pclassdeclNode1);
	}
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
	nodeList.add(listNode9);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AEmptyClassdeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AVardeclarationVardeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        {
            // Block
        PType ptypeNode3;
        PIdentifier pidentifierNode4;
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        pidentifierNode4 = (PIdentifier)nodeArrayList3.get(0);

        pvardeclNode2 = new AVarDecl(ptypeNode3, pidentifierNode4);
        }
	if(listNode1 != null)
	{
	  listNode5.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode5.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AEmptyVardeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AMethodparamMethoddeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode12 = new LinkedList();
        {
            // Block
        PMethodDecl pmethoddeclNode1;
        LinkedList listNode11 = new LinkedList();
        {
            // Block
        PType ptypeNode2;
        PIdentifier pidentifierNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        PExp pexpNode10;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList9.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pexpNode10 = (PExp)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(ptypeNode2, pidentifierNode3, listNode5, listNode7, listNode9, pexpNode10);
        }
        listNode11 = (LinkedList)nodeArrayList14.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode12.add(pmethoddeclNode1);
	}
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
	nodeList.add(listNode12);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AEmptyMethoddeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AParamlistParamlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        PFormal pformalNode1;
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PType ptypeNode2;
        PIdentifier pidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);

        pformalNode1 = new AFormal(ptypeNode2, pidentifierNode3);
        }
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(pformalNode1 != null)
	{
	  listNode5.add(pformalNode1);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AEmptyParamlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AParamsParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        PFormal pformalNode1;
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PType ptypeNode2;
        PIdentifier pidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);

        pformalNode1 = new AFormal(ptypeNode2, pidentifierNode3);
        }
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(pformalNode1 != null)
	{
	  listNode5.add(pformalNode1);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AEmptyParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AStatementlistStatementlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        LinkedList listNode2 = new LinkedList();
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pstatementNode1 != null)
	{
	  listNode3.add(pstatementNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AEmptyStatementlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AIntarrayType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntArrayTypeType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new ABooleanTypeType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntegerTypeType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AIdType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);

        ptypeNode1 = new AIdentifierTypeType(pidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AIfmatchedIfstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AIfunmatchedIfstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AIfelseIfmatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfStatement(pexpNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AOtherIfmatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AIfIfunmatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PStatement pstatementNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(pexpNode2, pstatementNode3, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AIfelseIfunmatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfStatement(pexpNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AStatementlistOtherstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementNode1 = new ABlockStatement(listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AWhileOtherstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PStatement pstatementNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(pexpNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ASysoOtherstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pstatementNode1 = new APrintStatement(pexpNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AEqualOtherstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PExp pexpNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatement(pidentifierNode2, pexpNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AArrayequalOtherstatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);

        pstatementNode1 = new AArrayAssignStatement(pidentifierNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AIdentifierOtherexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);

        pexpNode1 = new AIdentifierExpExp(pidentifierNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ANumberOtherexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TTokNumber ttoknumberNode2;
        ttoknumberNode2 = (TTokNumber)nodeArrayList1.get(0);

        pexpNode1 = new AIntegerLiteralExp(ttoknumberNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ATrueOtherexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new ATrueExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AFalseOtherexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AFalseExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AThisOtherexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AThisExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AParenOtherexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AArrayOtherexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AArrayLookupExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ALengthOtherexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexpNode1 = new AArrayLengthExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAccessOtherexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PIdentifier pidentifierNode3;
        LinkedList listNode5 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpNode1 = new ACallExp(pexpNode2, pidentifierNode3, listNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AInstanceOtherexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);

        pexpNode1 = new ANewObjectExp(pidentifierNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ANewarrayOtherexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList4.get(0);

        pexpNode1 = new ANewArrayExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ANotexpressionNotexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ANextNotexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ATimesexpressionTimesexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ATimesExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ANextTimesexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce APlusPmexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AMinusPmexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ANextPmexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ALessexpressionLessexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALessThanExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ANextLessexpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AExpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ANextExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AExpressionlistExpressionlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        LinkedList listNode2 = new LinkedList();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AEmptyExpressionlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AExpressionrestExpressionrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        LinkedList listNode2 = new LinkedList();
        pexpNode1 = (PExp)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AEmptyExpressionrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdentifier pidentifierNode1;
        {
            // Block
        TTokId ttokidNode2;
        ttokidNode2 = (TTokId)nodeArrayList1.get(0);

        pidentifierNode1 = new AIdentifier(ttokidNode2);
        }
	nodeList.add(pidentifierNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {9, SHIFT, 1}, },
			{{-1, ERROR, 1}, {37, SHIFT, 4}, },
			{{-1, ERROR, 2}, {38, ACCEPT, -1}, },
			{{-1, REDUCE, 4}, {9, SHIFT, 6}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 5}, {5, SHIFT, 8}, },
			{{-1, ERROR, 6}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 8}, {10, SHIFT, 10}, },
			{{-1, ERROR, 9}, {5, SHIFT, 11}, {18, SHIFT, 12}, },
			{{-1, ERROR, 10}, {11, SHIFT, 13}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 12}, {37, SHIFT, 4}, },
			{{-1, ERROR, 13}, {12, SHIFT, 16}, },
			{{-1, REDUCE, 8}, {10, SHIFT, 17}, {15, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {37, SHIFT, 4}, },
			{{-1, ERROR, 15}, {5, SHIFT, 24}, },
			{{-1, ERROR, 16}, {13, SHIFT, 25}, },
			{{-1, ERROR, 17}, {15, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 21}, {6, SHIFT, 27}, },
			{{-1, ERROR, 22}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 25}, {1, SHIFT, 30}, },
			{{-1, ERROR, 26}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 4}, {9, SHIFT, 6}, },
			{{-1, ERROR, 28}, {19, SHIFT, 33}, },
			{{-1, REDUCE, 8}, {10, SHIFT, 17}, {15, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {37, SHIFT, 4}, },
			{{-1, ERROR, 30}, {14, SHIFT, 35}, },
			{{-1, ERROR, 31}, {1, SHIFT, 36}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 34}, {6, SHIFT, 37}, },
			{{-1, ERROR, 35}, {3, SHIFT, 38}, },
			{{-1, REDUCE, 10}, {15, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 4}, {9, SHIFT, 6}, },
			{{-1, ERROR, 38}, {4, SHIFT, 42}, },
			{{-1, ERROR, 39}, {2, SHIFT, 43}, },
			{{-1, ERROR, 40}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 42}, {37, SHIFT, 4}, },
			{{-1, ERROR, 43}, {5, SHIFT, 46}, },
			{{-1, REDUCE, 12}, {20, SHIFT, 47}, },
			{{-1, ERROR, 45}, {2, SHIFT, 49}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 47}, {15, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 49}, {5, SHIFT, 52}, },
			{{-1, REDUCE, 14}, {5, SHIFT, 53}, {7, SHIFT, 54}, {15, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {23, SHIFT, 55}, {24, SHIFT, 56}, {37, SHIFT, 4}, },
			{{-1, ERROR, 51}, {37, SHIFT, 4}, },
			{{-1, ERROR, 52}, {5, SHIFT, 53}, {7, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 14}, {5, SHIFT, 53}, {7, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {37, SHIFT, 4}, },
			{{-1, ERROR, 54}, {1, SHIFT, 68}, },
			{{-1, ERROR, 55}, {1, SHIFT, 69}, },
			{{-1, ERROR, 56}, {1, SHIFT, 70}, },
			{{-1, ERROR, 57}, {22, SHIFT, 71}, },
			{{-1, REDUCE, 14}, {5, SHIFT, 53}, {7, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 18}, {3, SHIFT, 73}, {25, SHIFT, 74}, },
			{{-1, REDUCE, 12}, {20, SHIFT, 47}, },
			{{-1, ERROR, 65}, {6, SHIFT, 76}, },
			{{-1, ERROR, 66}, {3, SHIFT, 73}, {25, SHIFT, 74}, },
			{{-1, ERROR, 67}, {6, SHIFT, 77}, },
			{{-1, ERROR, 68}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 69}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 70}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 71}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 73}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 74}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 76}, {6, SHIFT, 97}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 79}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 83}, {15, SHIFT, 99}, {37, SHIFT, 4}, },
			{{-1, ERROR, 84}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 43}, {3, SHIFT, 102}, {21, SHIFT, 103}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 48}, {30, SHIFT, 104}, },
			{{-1, REDUCE, 50}, {28, SHIFT, 105}, {29, SHIFT, 106}, },
			{{-1, REDUCE, 52}, {27, SHIFT, 107}, },
			{{-1, ERROR, 90}, {2, SHIFT, 108}, {26, SHIFT, 109}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 92}, {2, SHIFT, 110}, {26, SHIFT, 109}, },
			{{-1, ERROR, 93}, {2, SHIFT, 111}, {26, SHIFT, 109}, },
			{{-1, ERROR, 94}, {19, SHIFT, 112}, {26, SHIFT, 109}, },
			{{-1, ERROR, 95}, {4, SHIFT, 113}, {26, SHIFT, 109}, },
			{{-1, ERROR, 96}, {19, SHIFT, 114}, {26, SHIFT, 109}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 98}, {2, SHIFT, 115}, {26, SHIFT, 109}, },
			{{-1, ERROR, 99}, {3, SHIFT, 116}, },
			{{-1, ERROR, 100}, {1, SHIFT, 117}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 102}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 103}, {31, SHIFT, 119}, {37, SHIFT, 4}, },
			{{-1, ERROR, 104}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 105}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 106}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 107}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 108}, {5, SHIFT, 53}, {7, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {37, SHIFT, 4}, },
			{{-1, ERROR, 109}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 110}, {5, SHIFT, 53}, {7, SHIFT, 128}, {23, SHIFT, 55}, {24, SHIFT, 56}, {37, SHIFT, 4}, },
			{{-1, ERROR, 111}, {19, SHIFT, 130}, },
			{{-1, ERROR, 112}, {6, SHIFT, 131}, },
			{{-1, ERROR, 113}, {25, SHIFT, 132}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 116}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 117}, {2, SHIFT, 134}, },
			{{-1, ERROR, 118}, {4, SHIFT, 135}, {26, SHIFT, 109}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 120}, {1, SHIFT, 136}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, {30, SHIFT, 104}, },
			{{-1, REDUCE, 47}, {30, SHIFT, 104}, },
			{{-1, REDUCE, 49}, {28, SHIFT, 105}, {29, SHIFT, 106}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 20}, {8, SHIFT, 137}, },
			{{-1, REDUCE, 51}, {27, SHIFT, 107}, },
			{{-1, ERROR, 128}, {1, SHIFT, 138}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 8}, {10, SHIFT, 17}, },
			{{-1, ERROR, 132}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 133}, {4, SHIFT, 141}, {26, SHIFT, 109}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 54}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, ERROR, 137}, {5, SHIFT, 53}, {7, SHIFT, 54}, {23, SHIFT, 55}, {24, SHIFT, 56}, {37, SHIFT, 4}, },
			{{-1, ERROR, 138}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 140}, {19, SHIFT, 147}, {26, SHIFT, 109}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 56}, {20, SHIFT, 148}, {26, SHIFT, 109}, },
			{{-1, ERROR, 143}, {2, SHIFT, 150}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 146}, {2, SHIFT, 151}, {26, SHIFT, 109}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 148}, {0, SHIFT, 78}, {1, SHIFT, 79}, {32, SHIFT, 80}, {33, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {36, SHIFT, 84}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 151}, {5, SHIFT, 53}, {7, SHIFT, 128}, {23, SHIFT, 55}, {24, SHIFT, 56}, {37, SHIFT, 4}, },
			{{-1, REDUCE, 56}, {20, SHIFT, 148}, {26, SHIFT, 109}, },
			{{-1, ERROR, 153}, {8, SHIFT, 155}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 155}, {5, SHIFT, 53}, {7, SHIFT, 128}, {23, SHIFT, 55}, {24, SHIFT, 56}, {37, SHIFT, 4}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 7}, {27, 32}, {37, 41}, },
			{{-1, 14}, {24, 29}, {46, 50}, },
			{{-1, 21}, {29, 34}, {131, 139}, },
			{{-1, 39}, },
			{{-1, 48}, {64, 75}, },
			{{-1, 57}, {53, 67}, {58, 72}, },
			{{-1, 22}, {17, 26}, {36, 40}, {47, 51}, },
			{{-1, 58}, {52, 65}, {108, 125}, },
			{{-1, 59}, },
			{{-1, 60}, {108, 126}, {110, 129}, {137, 144}, {151, 153}, {155, 144}, },
			{{-1, 61}, {137, 145}, },
			{{-1, 62}, },
			{{-1, 85}, },
			{{-1, 86}, {84, 101}, {104, 121}, },
			{{-1, 87}, {105, 122}, {106, 123}, },
			{{-1, 88}, {107, 124}, },
			{{-1, 89}, {109, 127}, },
			{{-1, 90}, {69, 92}, {70, 93}, {71, 94}, {73, 95}, {74, 96}, {79, 98}, {102, 118}, {116, 133}, {132, 140}, {136, 142}, {138, 146}, {148, 152}, },
			{{-1, 143}, },
			{{-1, 149}, {152, 154}, },
			{{-1, 91}, {1, 5}, {6, 9}, {12, 15}, {14, 23}, {17, 23}, {22, 28}, {26, 31}, {29, 23}, {36, 23}, {40, 44}, {42, 45}, {47, 23}, {50, 63}, {51, 64}, {52, 66}, {53, 66}, {58, 66}, {83, 100}, {103, 120}, {108, 66}, {110, 66}, {137, 66}, {151, 66}, {155, 66}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: tok id",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '(', ')', '[', ']', '{', 'extends', ';', ',', '.', '=', '&&', '<', '+', '-', '*', tok id",
			"expecting: '{'",
			"expecting: 'public'",
			"expecting: '{', 'extends'",
			"expecting: 'static'",
			"expecting: '}', 'public', 'int', tok intarray, 'boolean', tok id",
			"expecting: 'void'",
			"expecting: 'main'",
			"expecting: 'int', tok intarray, 'boolean', tok id",
			"expecting: '}'",
			"expecting: '('",
			"expecting: ';'",
			"expecting: 'String'",
			"expecting: '{', '}', 'if', 'public', 'int', tok intarray, 'boolean', 'return', 'while', 'System.out.println', tok id",
			"expecting: '['",
			"expecting: ')', 'int', tok intarray, 'boolean', tok id",
			"expecting: ']'",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: '{', 'if', 'int', tok intarray, 'boolean', 'return', 'while', 'System.out.println', tok id",
			"expecting: '{', 'if', 'while', 'System.out.println', tok id",
			"expecting: '{', '}', 'if', 'while', 'System.out.println', tok id",
			"expecting: 'return'",
			"expecting: '{', '}', 'if', 'return', 'while', 'System.out.println', tok id",
			"expecting: '{', '}', 'if', 'else', 'return', 'while', 'System.out.println', tok id",
			"expecting: '[', '=', tok id",
			"expecting: '[', '='",
			"expecting: tok number, '(', 'true', 'false', 'this', 'new', '!', tok id",
			"expecting: '}', 'return'",
			"expecting: ')', '[', ']', ';', ',', '.', '&&', '<', '+', '-', '*'",
			"expecting: 'int', tok id",
			"expecting: ')', ']', ';', ',', '&&', '<', '+', '-', '*'",
			"expecting: ')', ']', ';', ',', '&&', '<', '+', '-'",
			"expecting: ')', ']', ';', ',', '&&', '<'",
			"expecting: ')', '&&'",
			"expecting: ';', '&&'",
			"expecting: ']', '&&'",
			"expecting: 'length', tok id",
			"expecting: '='",
			"expecting: '}', 'public'",
			"expecting: tok number, '(', ')', 'true', 'false', 'this', 'new', '!', tok id",
			"expecting: ')', ',', '&&'",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 1, 2, 6, 7, 8, 9, 1, 10, 9, 5, 11, 12, 1, 1, 1, 13, 1, 1, 9, 14, 1, 3, 15, 9, 16, 14, 2, 17, 13, 18, 19, 3, 20, 21, 1, 2, 1, 5, 22, 21, 23, 12, 21, 5, 23, 1, 24, 25, 14, 14, 14, 26, 27, 27, 27, 27, 28, 29, 22, 13, 30, 13, 31, 31, 31, 31, 32, 31, 31, 21, 13, 28, 33, 31, 33, 33, 33, 34, 31, 33, 35, 35, 36, 37, 38, 33, 38, 38, 39, 40, 39, 3, 38, 18, 14, 35, 31, 41, 31, 31, 31, 31, 24, 31, 24, 15, 13, 42, 28, 33, 31, 21, 40, 33, 14, 35, 35, 35, 36, 27, 28, 37, 14, 28, 28, 43, 31, 40, 33, 33, 44, 24, 31, 13, 39, 33, 45, 21, 28, 27, 38, 28, 31, 21, 33, 24, 45, 46, 21, 24, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
