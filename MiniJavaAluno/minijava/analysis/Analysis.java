/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.analysis;

import minijava.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAMainClass(AMainClass node);
    void caseAClassDecl(AClassDecl node);
    void caseAVarDecl(AVarDecl node);
    void caseAMethodDecl(AMethodDecl node);
    void caseAFormal(AFormal node);
    void caseAArrayType(AArrayType node);
    void caseABooleanType(ABooleanType node);
    void caseAIntType(AIntType node);
    void caseAObjectType(AObjectType node);
    void caseABlockStatement(ABlockStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAAssignStatement(AAssignStatement node);
    void caseAArrayAssignStatement(AArrayAssignStatement node);
    void caseAAndExp(AAndExp node);
    void caseAEqualExp(AEqualExp node);
    void caseALessThanExp(ALessThanExp node);
    void caseAPlusExp(APlusExp node);
    void caseAMinusExp(AMinusExp node);
    void caseATimesExp(ATimesExp node);
    void caseAArrayLookupExp(AArrayLookupExp node);
    void caseAArrayLengthExp(AArrayLengthExp node);
    void caseACallExp(ACallExp node);
    void caseAIntegerLiteralExp(AIntegerLiteralExp node);
    void caseATrueExp(ATrueExp node);
    void caseAFalseExp(AFalseExp node);
    void caseAThisExp(AThisExp node);
    void caseANewArrayExp(ANewArrayExp node);
    void caseANewObjectExp(ANewObjectExp node);
    void caseANotExp(ANotExp node);
    void caseAIdentifierExp(AIdentifierExp node);

    void caseTTokNumber(TTokNumber node);
    void caseTTokLparen(TTokLparen node);
    void caseTTokRparen(TTokRparen node);
    void caseTTokLbracket(TTokLbracket node);
    void caseTTokRbracket(TTokRbracket node);
    void caseTTokLkey(TTokLkey node);
    void caseTTokRkey(TTokRkey node);
    void caseTTokIf(TTokIf node);
    void caseTTokElse(TTokElse node);
    void caseTTokClass(TTokClass node);
    void caseTTokPublic(TTokPublic node);
    void caseTTokStatic(TTokStatic node);
    void caseTTokVoid(TTokVoid node);
    void caseTTokMain(TTokMain node);
    void caseTTokString(TTokString node);
    void caseTTokInt(TTokInt node);
    void caseTTokIntarray(TTokIntarray node);
    void caseTTokBoolean(TTokBoolean node);
    void caseTTokExtends(TTokExtends node);
    void caseTTokSemicolon(TTokSemicolon node);
    void caseTTokComma(TTokComma node);
    void caseTTokDot(TTokDot node);
    void caseTTokReturn(TTokReturn node);
    void caseTTokWhile(TTokWhile node);
    void caseTTokSyso(TTokSyso node);
    void caseTTokEqual(TTokEqual node);
    void caseTTokEquals(TTokEquals node);
    void caseTTokAnd(TTokAnd node);
    void caseTTokLess(TTokLess node);
    void caseTTokPlus(TTokPlus node);
    void caseTTokMinus(TTokMinus node);
    void caseTTokTimes(TTokTimes node);
    void caseTTokLength(TTokLength node);
    void caseTTokTrue(TTokTrue node);
    void caseTTokFalse(TTokFalse node);
    void caseTTokThis(TTokThis node);
    void caseTTokNew(TTokNew node);
    void caseTTokExclamation(TTokExclamation node);
    void caseTTokBlank(TTokBlank node);
    void caseTTokComment(TTokComment node);
    void caseTTokId(TTokId node);
    void caseEOF(EOF node);
}
