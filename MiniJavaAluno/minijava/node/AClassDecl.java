/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import java.util.*;
import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AClassDecl extends PClassDecl
{
    private TTokId _name_;
    private TTokId _super_;
    private final LinkedList<PVarDecl> _attributes_ = new LinkedList<PVarDecl>();
    private final LinkedList<PMethodDecl> _methods_ = new LinkedList<PMethodDecl>();

    public AClassDecl()
    {
        // Constructor
    }

    public AClassDecl(
        @SuppressWarnings("hiding") TTokId _name_,
        @SuppressWarnings("hiding") TTokId _super_,
        @SuppressWarnings("hiding") List<PVarDecl> _attributes_,
        @SuppressWarnings("hiding") List<PMethodDecl> _methods_)
    {
        // Constructor
        setName(_name_);

        setSuper(_super_);

        setAttributes(_attributes_);

        setMethods(_methods_);

    }

    @Override
    public Object clone()
    {
        return new AClassDecl(
            cloneNode(this._name_),
            cloneNode(this._super_),
            cloneList(this._attributes_),
            cloneList(this._methods_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassDecl(this);
    }

    public TTokId getName()
    {
        return this._name_;
    }

    public void setName(TTokId node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TTokId getSuper()
    {
        return this._super_;
    }

    public void setSuper(TTokId node)
    {
        if(this._super_ != null)
        {
            this._super_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._super_ = node;
    }

    public LinkedList<PVarDecl> getAttributes()
    {
        return this._attributes_;
    }

    public void setAttributes(List<PVarDecl> list)
    {
        this._attributes_.clear();
        this._attributes_.addAll(list);
        for(PVarDecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PMethodDecl> getMethods()
    {
        return this._methods_;
    }

    public void setMethods(List<PMethodDecl> list)
    {
        this._methods_.clear();
        this._methods_.addAll(list);
        for(PMethodDecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._super_)
            + toString(this._attributes_)
            + toString(this._methods_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._super_ == child)
        {
            this._super_ = null;
            return;
        }

        if(this._attributes_.remove(child))
        {
            return;
        }

        if(this._methods_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TTokId) newChild);
            return;
        }

        if(this._super_ == oldChild)
        {
            setSuper((TTokId) newChild);
            return;
        }

        for(ListIterator<PVarDecl> i = this._attributes_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethodDecl> i = this._methods_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethodDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
